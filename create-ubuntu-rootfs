#!/bin/bash

# create-rootfs: create the minimum root filesystem from qemu-debootstrap.
#                and default version is ubuntu 14.04 trusty.

PROG=$(basename $0)

Usage () {
  cat<<-_EOF_
  usage: $PROG DIRECTORY
  where:
  DIRECTORY is the directory to store the generated root filesystem.

  Example:
  $PROG /home/rootfs/
  
  Instruction:
  Default version to be generated is ubuntu 14.04 trusty.
_EOF_
}

# 检查存放根文件系统的目录$directory
Directory_Detect () {

if [ -d $1 ]; then
	echo "I: Directory $1 already exist." &&
	sleep $delay_time &&
	if [ "$(ls -A $1)" == "" ];then
		echo "I: Directory $1 is empty. OK."
	else
		echo "W: Directory $1 contains other files, and it's recommended to have an empty directory." &&
		echo "I: Files are following:" &&
		echo "$(ls -l $1)" &&
		sleep $delay_time &&
		echo "Q: Which one would you like to do, continue, ignore or exit?" &&
		echo -e "continue: delete files in $1 and continue, make sure don't need these files anymore..\
		       \nignore  : keep these files in $1 and continue, choose this when continuing a last incompleted operation.\
	               \nexit    : stop operation and exit." &&
		sleep $delay_time &&
		echo -e "Q: What to do(continue/ignore/exit):\c" &&
		while { read delfile;[ "$delfile" != "continue" ] && [ "$delfile" != "ignore" ] && [ "$delfile" != "exit" ]; }; do
			echo -e "W: Invalid input. Please enter 'continue', 'ignore' or 'exit':\c"
		done
		if [ "$delfile" == "continue" ]; then
			echo -e "I: Deleting files in ${1}...\c" && 
			sudo rm -rf ${1}/* && echo " Done" || { echo -e "\nE: Fatal error! Deleting files in ${1} failed. Exit." && exit 1; } 
		elif [ "$delfile" == "ignore" ]; then
			echo "I: Keep files in $1 and continue."
		else
			echo "I: Choose to exit. Exit." && exit 1
		fi
	fi
else
	sleep $delay_time &&
	{ echo -e "I: Directory $1 doesn't exist. Creating...\c" && \
mkdir -p $1; } && \
echo " Done" || \
{ echo -e "\nE: Fatal error! Failed to create directory ${1}. Exit."&& exit 1; }
fi
}

# 挂载相关文件系统
ch-mount () {
  if [ "$1" == "-m" ] && [ -n "$2" ];
  then
    echo "I: MOUNTING" &&
    sleep $delay_time &&
    echo -e "I: Mounting ${2}/proc...\c" &&
    sudo mount -t proc /proc ${2}/proc && echo " Done" 
    sleep $delay_time &&
    echo -e "I: Mounting ${2}/sys...\c" &&
    sudo mount -t sysfs /sys ${2}/sys && echo " Done" 
    sleep $delay_time &&
    echo -e "I: Mounting ${2}/dev...\c" &&
    sudo mount -o bind /dev ${2}/dev && echo " Done" 
    sleep $delay_time &&
    echo -e "I: Mounting ${2}/dev/pts...\c" &&
    sudo mount -o bind /dev/pts ${2}/dev/pts && echo " Done"
  elif [ "$1" == "-u" ] && [ -n "$2" ];
  then
    echo "I: UNMOUNTING" &&
    sleep $delay_time &&
    echo -e "I: Umounting ${2}/proc...\c" &&
    sudo umount ${2}/proc && echo " Done" 
    sleep $delay_time &&
    echo -e "I: Umounting ${2}/sys...\c" &&
    sudo umount ${2}/sys && echo " Done" 
    sleep $delay_time &&
    echo -e "I: Umounting ${2}/dev/pts...\c" &&
    sudo umount ${2}/dev/pts && echo " Done"
    sleep $delay_time &&
    echo -e "I: Umounting ${2}/dev...\c" &&
    sudo umount ${2}/dev && echo " Done"
  else
    echo ""
    echo "Either 1'st, 2'nd or bothparameters were missing"
    echo ""
    echo "1'st parameter can be one ofthese: -m(mount) OR -u(umount)"
    echo "2'nd parameter is the full pathof rootfs directory(with trailing '/')"
    echo ""
    echo "For example: ch-mount -m/media/sdcard/"
    echo ""
    echo 1st parameter : ${1}
    echo 2nd parameter : ${2}
    exit 1
  fi
}

# 生成chroot文件系统挂载脚本
Create_CH_Mount () {

echo -e "I: Write chroot-mount sripts ${2} into ${1}...\c" &&

cat>$1/$2<<__EOF_
#!/bin/bash

# chroot-mount: mount/umount filesystems before/after chroot.

CH_Mount () {
  if [ "\$1" == "-m" ] && [ -n "\$2" ];
  then
    echo "I: MOUNTING" &&
    sleep \$delay_time &&
    echo -e "I: Mounting \${2}/proc...\\c" &&
    sudo mount -t proc /proc \${2}/proc && echo " Done" 
    sleep \$delay_time &&
    echo -e "I: Mounting \${2}/sys...\\c" &&
    sudo mount -t sysfs /sys \${2}/sys && echo " Done" 
    sleep \$delay_time &&
    echo -e "I: Mounting \${2}/dev...\\c" &&
    sudo mount -o bind /dev \${2}/dev && echo " Done" 
    sleep \$delay_time &&
    echo -e "I: Mounting \${2}/dev/pts...\\c" &&
    sudo mount -o bind /dev/pts \${2}/dev/pts && echo " Done"
  elif [ "\$1" == "-u" ] && [ -n "\$2" ];
  then
    echo "I: UNMOUNTING" &&
    sleep \$delay_time &&
    echo -e "I: Umounting \${2}/proc...\\c" &&
    sudo umount \${2}/proc && echo " Done" 
    sleep \$delay_time &&
    echo -e "I: Umounting \${2}/sys...\\c" &&
    sudo umount \${2}/sys && echo " Done" 
    sleep \$delay_time &&
    echo -e "I: Umounting \${2}/dev/pts...\\c" &&
    sudo umount \${2}/dev/pts && echo " Done"
    sleep \$delay_time &&
    echo -e "I: Umounting \${2}/dev...\\c" &&
    sudo umount \${2}/dev && echo " Done"
  else
    echo ""
    echo "Either 1'st, 2'nd or bothparameters were missing"
    echo ""
    echo "1'st parameter can be one ofthese: -m(mount) OR -u(umount)"
    echo "2'nd parameter is the full pathof rootfs directory(with trailing '/')"
    echo ""
    echo "For example: ch-mount -m/media/sdcard/"
    echo ""
    echo 1st parameter : \${1}
    echo 2nd parameter : \${2}
    exit 1
  fi
}

# 判断是否是root权限执行
if [ \$(id -u) -ne 0 ]; then
        echo "E: Permission denied. Are you root?" &&
        exit 1
fi

delay_time=0.6 &&
CH_Mount \$1 \$2

__EOF_

[ $? -eq 0 ] && echo " Done" || { echo -e "\nE: Write chroot-mount sripts ${2} into ${1} failed, please check." && exit 1; } &&

# 为脚本添加可执行权限
sleep $delay_time &&
echo -e "I: Adding executable mode to ${2}...\c" &&
sudo chmod +x $1/$2 && echo " Done" || echo -e "\nE: Adding executable mode to ${2} failed, please check."

}

# 创建新的sources.list文件
Create_SourcesList () {
cat>$1/etc/apt/sources.list<<-_EOF_
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.

deb http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted
#deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted
#deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted

## Uncomment the following two lines to add software from the 'universe'
## repository.
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://ports.ubuntu.com/ubuntu-ports/ trusty universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty universe
deb http://ports.ubuntu.com/ubuntu-ports/ trusty-updates universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-updates universe

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
# deb http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted

deb http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted
deb http://ports.ubuntu.com/ubuntu-ports/ trusty-security universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-security universe
deb http://ports.ubuntu.com/ubuntu-ports/ trusty-security multiverse
# deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-security multiverse
_EOF_
}

# 写入配置文件至新创建的根文件系统
Create_RootfsConf () {

cat>$1/$2/$3<<-__EOF_
#!/bin/bash

# configure-rootfs: Configurations root filesystem after chroot.
delay_time=0.6

echo "" &&
echo "I: Chroot successfully!" &&
echo "" &&
sleep \$delay_time &&
echo "I: Starting configuring the root filesystem..." &&
sleep \$delay_time &&

# 生成静态ip地址配置文件
Create_StaticIP () {

cat>/etc/network/interfaces<<_EOF_
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
#source-directory /etc/network/interfaces.d

# loopback network interface
auto lo
iface lo inet loopback

# primary network interface
auto eth0
iface eth0 inet static
	address 192.168.2.115
	netmask 255.255.255.0
	gateway 192.168.2.1
	dns-nameservers 114.114.114.114 8.8.8.8
# hwaddress ether DE:AD:BE:EF:CA:FE

auto eth1
iface eth1 inet static
	address 192.168.1.115
	netmask 255.255.255.0
	gateway 192.168.1.1
# hwaddress ether DE:AD:BE:EF:CA:FE

# wireless network interface
# auto wlan0
# iface wlan0 inet dhcp
#	wpa-ssid "my_wifi_name"
#	wpa-psk  "my_wifi_pass"
_EOF_
}

# 配置串口调试服务
Create_SerailConf () {

cat>/etc/init/serial.conf<<-_EOF_
start on stopped rc RUNLEVEL=[2345]
stop on runlevel [!2345]
respawn
exec /sbin/getty 115200 ttyO0
_EOF_
}

# 设置挂载文件设置fstab文件
Create_Fstab () {

cat>/etc/fstab<<-_EOF_
# <file system>   <dir>         <type>    <options>          <dump>      <pass>
/dev/mmcblk0p5    /            ext4     defaults,noatime,errors=remount-ro   0      1
/dev/mmcblk0p1    /boot/uboot   vfat      defaults,noatime                 0      0
_EOF_
}

# 输出要安装的软件列表
Output_Package () {

cat<<-_EOF_
  language-pack-en-base
  sudo
  ssh
  net-tools
  ethtool
  wireless-tools
  ifupdown
  network-manager
  iputils-ping
  rsyslog
  bash-completion
  htop
  resolvconf
  dialog
_EOF_
}

# 更新源目录树
echo "I: Running command: apt-get update" &&
apt-get update && echo "I: Apt-get update successfully!" || \
{ echo "E: Fatal error! Failed to execute apt-get update, check your internet connecting. Exit" && exit 1; } &&

# 安装必需的基本软件包，此过程要求网速良好，且需要3~5分钟时间
echo "I: Installing necessary packages..." &&
sleep \$delay_time &&
echo "I: The following packages will be installed..." &&
Output_Package &&

sleep \$delay_time &&
echo "I: Starting installing..." &&
apt-get install \
  language-pack-en-base \
  sudo \
  ssh \
  net-tools \
  ethtool \
  wireless-tools \
  ifupdown \
  network-manager \
  iputils-ping \
  rsyslog \
  bash-completion \
  htop \
  resolvconf \
  dialog \
  --no-install-recommends && \
echo "I: Install packages successfully!" ||\
{ echo "E: Fatal error! Failed to install packages, check your internet connecting. Exit" && exit 1; } &&

# 添加用户ubuntu至sudo用户组
sleep \$delay_time &&
{ echo "I: Add user ubuntu:";\
 adduser ubuntu; \
echo "I: Revise root password:";\
passwd root;\
echo "I: Add user ubuntu to group sudo...";\
adduser ubuntu sudo; } && \
echo "I: User settings completed." ||\
{ echo "E: Fatal error! User settings failed. Exit." && exit 1; } &&

# 设置主机名称
sleep \$delay_time &&
echo "I: Configuring the host infomation..." &&
sleep \$delay_time &&
echo "I: Setting the hostname as 'ubuntu-armhf'..." &&
echo "ubuntu-armhf">/etc/hostname &&

# 设置本机入口ip
echo "127.0.0.1 localhost">>/etc/hosts &&
echo "127.0.0.1 ubuntu-armhf">>/etc/hosts &&

# 允许自动更新dns
sleep \$delay_time &&
echo "I: Allowing auto update DNS..." &&
dpkg-reconfigure resolvconf && \
echo "I: DNS settings completed." || \
echo "E: DNS settings failed. Set afterwards by hand." &&

# 设置时区
sleep \$delay_time &&
echo "I: Allowing auto update time..." &&
dpkg-reconfigure tzdata && \
echo "I: Time settings completed." || \
echo "E: Time settins failed. Set afterwards by hand." &&

# 设置静态ip
sleep \$delay_time &&
echo "I: Configuring static ip..." &&
sleep \$delay_time &&
echo "I: Setting eth0 as 192.168.1.115..." &&
sleep \$delay_time &&
echo "I: Setting eth1 as 192.168.2.115..." &&
sleep \$delay_time &&
echo "I: Adding nameservers 114.114.114.114 8.8.8.8... " &&
{ mv /etc/network/interfaces /etc/network/interfaces.bak; \
Create_StaticIP; } && \
echo "I: Static ip settings completed." || \
echo "E: Failed to configure static ip. Configure afterwards by hand." &&

# 设置串口调试服务，板子上第一个串口是ttyO0
sleep \$delay_time &&
echo "I: Configuring the serial service..." &&
sleep \$delay_time &&
echo "I: Setting serial ttyO0 as the login port..." &&
Create_SerailConf && echo "I: Serial settings completed." || echo "E:  Serial settings failed. Set afterwards by hand, or you cannot login." && 

# 设置SD卡启动参数，指定根目录/的挂载分区为根文件系统所在分区，这里是SD卡的第5分区
sleep \$delay_time &&
echo "I: Configuring the boot SD card ..." &&
sleep \$delay_time &&
echo "I: Booting from mmcblk0p5(ext4), so flash this filesystem to your SD card's fifth partition..." &&
{ mv /etc/fstab /etc/fstab.bak; \
Create_Fstab; } && \
echo "I: Boot SD card settings completed." || \
{ echo "E: Fatal error! Boot SD card settings failed. Exit." && exit 1; } &&

# 取消failsafe.conf文件中的延时
sleep \$delay_time &&
echo -e "I: Stopping failsafe delay...\\c" &&
sed -i 's/sleep\\s[0-9]\\{1,2\\}/sleep 1/g' /etc/init/failsafe.conf && \
echo " Done" || \
echo -e "\\nE: Stopping failsafe delay failed." &&

# 清理文件系统中不需要的文件
sleep \$delay_time &&
echo "I: Self clean unecessary files and packages..." &&
{ apt-get autoremove;\
apt-get autoclean;\
apt-get clean; } && \
echo "I: Self clean completed." || \
echo "E: Self clean failed." && 

# 退出chroot，完成最小根文件系统制作
sleep \$delay_time &&
echo "I: Root filesystem configuration completed!" &&
echo "I: Done!" &&
sleep \$delay_time &&
echo "I: Exiting..." &&
exit

__EOF_
}

# 生成GUI安装脚本:gui-install
Create_GUI_Install () {

echo -e "I: Write GUI install sripts ${2} into ${1}...\c" &&

cat>$1/$2<<__EOF_
#!/bin/bash

# gui-install: Install graphics user interface support on ubuntu-14.04-trusty OS, such as Xorg, lxde-core and so on.

# 判断是否是root权限执行
if [ \$(id -u) -ne 0 ]; then
        echo "E: Permission denied. Are you root?" &&
        exit 1
fi

delay_time=0.6

# 打印安装选项
cat<<_EOF_
Q: Which one would you want to install, Xorg only or Xorg and lxde?
1) Xorg only         : Only install GUI support componets Xorg, don't install desktop environment, but can use other GUI applications.
2) Xorg and lxde-core: Install GUI support componets Xorg and minimum desktop environment lxde-core. This may take more memory and disk.
3) Xorg and lxde     : Install GUI support componets Xorg and full desktop environment lxde. This may take much more memory and disk.
4) Exit              : Stop operation and exit.
_EOF_

# 修改X的执行权限为anybody
Xwrapper_Anybody () {

echo -e "I: Allow anybody to run X, to change this go to /etc/X11/Xwrapper.config...\\c" &&
sudo sed -i 's/allowed_users=.*/allowed_users=anybody/g' /etc/X11/Xwrapper.config && echo " Done" || echo -e "\nE: Allow anybody to run X failed."
}

# 打印安装完成信息
Print_MSG () {
echo "I: To configure X settings, go to directory /usr/share/X11/xorg.conf.d." &&
echo "" &&
echo "----------------------------Xorg components installation completed. Enjoy!--------------------------------" &&
echo ""
}

sleep \$delay_time &&
echo -e "Q: What to do(1/2/3/4):\\c" &&
read gui_option &&
loop_flag=true &&
while \$loop_flag; do
case \$gui_option in
        1)
        loop_flag=false
        echo "I: Only install GUI support componets Xorg." &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install xorg" &&
        sudo apt-get install xorg && echo "I: Install Xorg completed. Exit." || { echo "E: Install Xorg failed. Exit." && exit 1; } &&
        Xwrapper_Anybody &&
	Print_MSG &&
        exit 0
        ;;
        2)
        loop_flag=false
        echo "I: Install GUI support componets Xorg and minimum desktop environment lxde-core." &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install xorg lxde-core" &&
        sudo apt-get install xorg lxde-core && echo "I: Install Xorg and lxde-core completed. Exit." || { echo "E: Install Xorg and lxde-core failed. Exit." && exit 1; } &&
	Xwrapper_Anybody &&
        Print_MSG &&
        exit 0
        ;;
        3)
        loop_flag=false
        echo "I: Install GUI support componets Xorg and full desktop environment lxde." &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install xorg lxde" &&
        sudo apt-get install xorg lxde && echo "I: Install Xorg and lxde completed. Exit." || { echo "E: Install Xorg and lxde failed. Exit." && exit 1; } &&
        Xwrapper_Anybody &&
	Print_MSG &&
        exit 0
        ;;
        4)
        loop_flag=false
        echo "I: Choose to exit. Eixt." &&
        echo ""
        exit 0
        ;;
        *)
        echo -e "W: Invalid input. Please input '1', '2', '3' or '4':\\c"
        read gui_option
        ;;
esac
done

__EOF_

[ $? -eq 0 ] && echo " Done" || { echo -e "\nE: Write GUI install sripts ${2} into ${1} failed, please check." && exit 1; } &&

# 为脚本添加可执行权限
sleep $delay_time &&
echo -e "I: Adding executable mode to ${2}...\c" &&
sudo chmod +x $1/$2 && echo " Done" || echo -e "\nE: Adding executable mode to ${2} failed, please check."

}

# 生成ROS安装脚本:ros-install
Create_ROS_Install () {

echo -e "I: Write ROS install sripts ${2} into ${1}...\c" &&

cat>$1/$2<<__EOF_
#!/bin/bash

# ros-install: Install ROS Indigo based on Xorg and ubuntu-14.04-trusty.

# 输出安装选项的函数
Output_InstallOPT () {
cat<<_EOF_
Q: What kind of ROS packages would you like to install, Desktop-Full(recommend), Desktop or ROS-Base?
1) Desktop-Full: Including ROS, rqt, rviz, robot-generic libraries, 2D/3D simulators, navigation and 2D/3D perception.
2) Desktop     : Including ROS, rqt, rviz, and robot-generic libraries.
3) ROS-Base    : Only including ROS package, build, and communication libraries. No GUI tools.
4) Exit        : Stop operation and exit.
_EOF_
}

# 检查当前系统版本是否符合要求
Detect_OS () {

echo "I: Detecting current OS version..." &&
sleep \$delay_time &&
version=\$(cat /etc/issue) &&
if [[ "\${version%%\\ \\*}"=~"Ubuntu 14.04.*? LTS" ]]; then
        echo "I: Current OS is \${version%%\\ \\*}. OK"
else
        echo "E: Fatal error! Current OS is not ubuntu-14.04-trusty. Exit." && exit 1
fi
}

# 检查是否安装GUI支持
Detect_Xorg () {

echo "I: Detecting GUI support components Xorg installed or not..." &&
sleep \$delay_time &&
if ! which X>/dev/null; then
        echo "E: Fatal error! GUI support componets Xorg not installed. Can't install \${1}. Exit." && exit 1
else
        echo "I: GUI support componets Xorg already installed. OK" &&
        echo "I: Starting install \${1}..."
fi
}


# ROS安装前环境准备
ROS_Before () {

# 设置系统语言变量
echo -e "I: Setting system locale...\\c" &&
sleep \$delay_time &&
sudo update-locale LANG=C LANGUAGE=C LC_ALL=C LC_MESSAGES=POSIX && \
echo " Done" ||\
{ echo -e "\\nE: Fatal error! Setting system locale failed. Exit.\
\\nYou may try:\
\\nexport LANGUAGE=en_US.UTF-8\
\\nexport LANG=en_US.UTF-8\
\\nexport LC_ALL=en_US.UTF-8\
\\nlocale-gen en_US.UTF-8\
\\n dpkg-reconfigure locales"\
 && exit 1; } &&

# 设置ROS源地址
echo -e "I: Adding ROS packages sources.list...\\c" &&
sleep \$delay_time &&
sudo sh -c 'echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu trusty main" > \
/etc/apt/sources.list.d/ros-latest.list' && echo " Done" || \
{ echo -e "\\nE: Fatal error! Adding ROS packages sources.list failed. Exit." && exit 1; } &&

# 设置密钥验证
echo -e "I: Setting ROS packages keys...\\c" &&
sleep \$delay_time &&
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116 && \
echo " Done" || \
{ echo -e "\\nE: Fatal error! Setting ROS packages keys failed. Exit." && exit 1; } &&

# 更新源目录树
echo "I: Updating your ubuntu packages index..." &&
sleep \$delay_time &&
echo "I: Running command: sudo apt-get update" &&
sudo apt-get update && echo "I: Updating your ubuntu packages index completed." || \
echo "Updating your ubuntu packages index failed, please check."
}

# ROS安装后环境设置
ROS_After () {

# Initialize rosdep
echo "I: Initialize rosdep" &&
echo "I: Running command: sudo apt-get install python-rosdep" &&
echo "I: Running command: sudo rosdep" &&
echo "I: Running command: rosdep update" &&
{ sudo apt-get install python-rosdep && sudo rosdep init && rosdep update; } && \
echo "I: Initialize rosdep completed." || \
echo "E: Initialize rosdep failed, please check." &&

# ROS环境变量设置
echo -e "I: Setting ROS environment...\\c" &&
sleep \$delay_time &&
{ echo "source /opt/ros/indigo/setup.bash" >> ~/.bashrc && source ~/.bashrc; } && \
echo " Done" || \
echo -e "\\nE: Setting ROS environment failed." &&

# Getting rosinstall
# rosinstall is a frequently used command-line tool in ROS that is distributed separately. It enables you to easily download many source trees for ROS packages with one command
echo "I: Installing rosinstall..." &&
sleep \$delay_time &&
echo "I: Running command: sudo apt-get install python-rosinstall" &&
sudo apt-get install python-rosinstall && \
echo "I: Installing rosinstall completed." || \
echo "E: Installing rosinstall failed, please check." &&

# 验证环境变量并打印安装成功信息
[ \$(id -u) -eq 0 ] || { printenv | grep ROS; } &&
echo "" &&
echo "-------------------------ROS installation complete. Enjoy!---------------------------" &&
echo ""
}

# 推荐使用普通用户权限执行，详情见ROS安装官网：http://wiki.ros.org/indigo/Installation/UbuntuARM
if [ \$(id -u) -eq 0 ]; then
        echo "W: Running this sreipts as 'root' is not recommended." &&
	echo -e "Q: Exit to run as 'normal' or till continue(exit/continue):\\c" &&
	read user_option &&
	if [ "\$user_option" == "exit" ]; then
		echo "I: Choose to exit." &&
		exit 1
	fi
fi

# 开始安装ROS软件包
delay_time=0.5
echo "I: Prepare to install ROS packages" &&
sleep \$delay_time &&
# 检查安装所需条件：Xorg, ubuntu-14.04-trusty &&
Detect_OS &&

sleep \$delay_time &&
# 输出安装选项
Output_InstallOPT &&

sleep \$delay_time &&
echo -e "Q: What to do(1/2/3/4):\\c" &&
read ros_option &&
loop_flag=true &&
while \$loop_flag; do
case \$ros_option in
        1)
        loop_flag=false
        Detect_Xorg ROS-Desktop-Full &&
        sleep \$delay_time &&
        ROS_Before &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install ros-indigo-desktop-full" &&
        sudo apt-get install ros-indigo-desktop-full && \
echo "I: Install ros-indigo-desktop-full completed." || \
{ echo "E: Install ros-indigo-desktop-full failed. Exit." && exit 1; } &&
        ROS_After &&
        exit 0
        ;;
        2)
        loop_flag=false
        Detect_Xorg ROS-Desktop &&
        sleep \$delay_time &&
        ROS_Before &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install ros-indigo-desktop" &&
        sudo apt-get install ros-indigo-desktop && \
echo "I: Install ros-indigo-desktop completed." || \
{ echo "E: Install ros-indigo-desktop failed. Exit." && exit 1; } &&
        ROS_After &&
        exit 0
        ;;
        3)
        loop_flag=false
        echo "I: ROS-Base doesn't need GUI support. OK" &&
        sleep \$delay_time &&
        echo "I: Starting install ROS-Base..." &&
        sleep \$delay_time &&
        ROS_Before &&
        sleep \$delay_time &&
        echo "I: Running command: sudo apt-get install ros-indigo-ros-base" &&
        sudo apt-get install ros-indigo-ros-base && \
echo "I: Install ros-indigo-ros-base completed." || \
{ echo "E: Install ros-indigo-ros-base failed. Exit." && exit 1; } &&
        ROS_After &&
        exit 0
        ;;
        4)
        loop_flag=false
        echo "I: Choose to exit. Eixt."
        exit 0
        ;;
        *)
        echo -e "W: Invalid input. Please input '1', '2', '3' or '4':\\c"
        read ros_option
        ;;
esac
done

__EOF_

[ $? -eq 0 ] && echo " Done" || { echo -e "\nE: Write ROS install sripts ${2} into ${1} failed, please check." && exit 1; } &&

# 为脚本添加可执行权限
sleep $delay_time &&
echo -e "I: Adding executable mode to ${2}...\c" &&
sudo chmod +x $1/$2 && echo " Done" || echo -e "\nE: Adding executable mode to ${2} failed, please check."

}
# 判断命令格式是否正确
if (($#!=1));then
  Usage
  exit 1
fi

# 判断是否是root权限执行
if [ $(id -u) -ne 0 ]; then
	echo "E: Permission denied. Are you root?" &&
	exit 1
fi

# 创建变量
directory=$1 &&
tmp_directory=/tmp/ &&
rootfs_conf=configure-rootfs &&
gui_name=gui-install &&
ros_name=ros-install &&
delay_time=0.6 &&

# 判断directory是否存在
echo "I: Checking directory $directory state..." &&
#([ -d $directory ] && echo "I: Directory $directory already exists...") || \
#(mkdir -p $directory && echo "I: Directory $directory doesn't exist. Creating...") &&
sleep $delay_time &&
Directory_Detect $directory &&

sleep $delay_time &&
echo "I: Starting creating root filesystem for amrhf..." &&

# 安装qemu-static解释器
sleep $delay_time &&
echo "I: Installing qemu-user-static..." &&
sudo apt-get install qemu-user-static && echo "I: Install qemu-user-static completed." || \
{ echo "E: Fatal error! Failed to install qemu-user-static. Exit." && exit 1; } &&

# 利用qemu-debootstrap命令获取最小裸文件系统，此过程要求网速良好，且需要10~20分钟时间
sleep $delay_time &&
echo "I: Fecthing minimum root filesystem files, this may take several minutes..." &&
sleep $delay_time &&
echo "I: Default version to be generated is ubuntu-14.04-trusy..." &&
sudo qemu-debootstrap --arch armhf --variant=minbase --verbose trusty $directory http://112.74.164.142/ubuntu-ports/ \
&& echo "I: Fetching minimum root filesystem completed." \
|| { echo "E: Fatal error! Failed to fetch minimum root filesystem. Exit." && exit 1; } &&

# 复制本机/etc/resolv.conf至新创建的文件系统中，以便后续chroot联网
sleep $delay_time &&
echo -e "I: Copying resolv.conf...\c" &&
sudo cp /etc/resolv.conf $directory/etc/resolv.conf && echo " Done" || \
{ echo -e "\nE: Fatal error! Failed to copy resolv.conf file. Exit" && exit 1; } &&

# chroot之前挂载相关文件系统
sleep $delay_time &&
echo "I: Mount filesystems before chroot" &&
ch-mount -m $directory &&

# 创建原sources的备份，并创建新的自己的服务器sources.list文件
sleep $delay_time &&
echo -e "I: Configuring sources.list file...\c" &&
{ sudo mv $directory/etc/apt/sources.list $directory/etc/apt/sources.list.bak && Create_SourcesList $directory && \
sudo sed -i 's/ports.ubuntu.com/112.74.164.142/g' $directory/etc/apt/sources.list; } && echo " Done" || \
{ echo -e "\nE: Fatal error! Failed to configure sources.list file. Exit" && exit 1; } &&

# 将需要执行的配置文件写入文件系统的/tmp文件中，以便chroot后执行
sleep $delay_time &&
echo -e "I: Write configuration file to $directory/$tmp_directory/$rootfs_conf...\c" &&
Create_RootfsConf $directory $tmp_directory $rootfs_conf && echo " Done" || \
{ echo -e "\nE: Fatal error! Failed to write configuration file. Exit." && exit 1; } &&

# 为脚本添加可执行权限
sleep $delay_time &&
echo -e "I: Adding executable mode to $directory/$tmp_directory/${rootfs_conf}...\c" &&
sudo chmod u+x $directory/$tmp_directory/$rootfs_conf && echo " Done" || \
{ echo -e "\nE: Fatal error! Adding executable mode to $directory/$tmp_directory/${rootfs_conf} failed. Exit." && exit 1; } && 

# Chroot并执行配置文件
sleep $delay_time &&
echo "I: Chroot to ${directory}..." &&
sudo chroot $directory $tmp_directory/$rootfs_conf && \
echo "I: Chroot configuration completed. Exit." || \
{ echo "E: Fatal error! Failed to chroot to ${directory} or failed to configure root filesystem. Exit." && exit 1; } &&

# 写入GUI安装脚本至ubuntu用户目录
sleep $delay_time &&
Create_GUI_Install $directory/home/ubuntu gui-install &&

# 写入ROS安装脚本至ubuntu用户目录
sleep $delay_time &&
Create_ROS_Install $directory/home/ubuntu ros-install &&

# 写入chroot-mount挂载工具至ubuntu用户目录
sleep $delay_time &&
Create_CH_Mount $directory/home/ubuntu chroot-mount &&

# Chroot配置文件执行完毕，配置完成，退出
# 卸载相关文件系统
sleep $delay_time &&
echo "I: Umounting the filesystems..." &&
sleep $delay_time &&
ch-mount -u $directory &&
sleep $delay_time &&
echo "I: Create root filesystem successfully in $directory..." &&
echo "" &&
sleep $delay_time &&
echo "---------------------------Done! Enjoy!-------------------------------" &&
echo ""
